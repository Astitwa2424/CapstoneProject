generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  DRIVER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  PENDING
  NEW
  ACCEPTED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  FAILED
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?        @map("email_verified")
  image         String?
  password      String?
  role          UserRole         @default(CUSTOMER)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  accounts          Account[]
  sessions          Session[]
  customerProfile   CustomerProfile?
  driverProfile     DriverProfile?
  restaurantProfile RestaurantProfile?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CustomerProfile {
  id             String           @id @default(cuid())
  userId         String           @unique @map("user_id")
  phone          String?
  address        String?
  dateOfBirth    DateTime?        @map("date_of_birth")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders         Order[]
  paymentMethods PaymentMethod[]
  reviews        Review[]

  @@map("customer_profiles")
}

model DriverProfile {
  id                 String    @id @default(cuid())
  userId             String    @unique @map("user_id")
  phone              String?
  dateOfBirth        DateTime? @map("date_of_birth")
  address            String?
  licenseNumber      String?   @unique @map("license_number")
  vehicleType        String?   @map("vehicle_type")
  vehicleModel       String?   @map("vehicle_model")
  plateNumber        String?   @map("plate_number")
  registrationNumber String?   @map("registration_number")
  bankAccount        String?   @map("bank_account")
  routingNumber      String?   @map("routing_number")
  profileImage       String?   @map("profile_image")
  vehiclePhotos      Json?     @map("vehicle_photos")
  isAvailable        Boolean   @default(false) @map("is_available")
  latitude           Float?
  longitude          Float?
  rating             Float     @default(0.0)
  totalDeliveries    Int       @default(0) @map("total_deliveries")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]
  reviews Review[]

  @@map("driver_profiles")
}

model RestaurantProfile {
  id                         String   @id @default(cuid())
  userId                     String   @unique @map("user_id")
  name                       String
  description                String?
  address                    String?
  phone                      String?
  cuisine                    String?
  isOpen                     Boolean  @default(false) @map("is_open")
  rating                     Float    @default(0.0)
  deliveryFee                Float    @default(0.0) @map("delivery_fee")
  minOrder                   Float    @default(0.0) @map("min_order")
  businessRegistrationNumber String?  @map("business_registration_number")
  taxId                      String?  @map("tax_id")
  category                   String?
  website                    String?
  facebookUrl                String?  @map("facebook_url")
  instagramUrl               String?  @map("instagram_url")
  streetAddress              String?  @map("street_address")
  city                       String?
  state                      String?
  postalCode                 String?  @map("postal_code")
  country                    String?
  operatingHours             String?  @map("operating_hours")
  bankAccountNumber          String?  @map("bank_account_number")
  bankName                   String?  @map("bank_name")
  mapLatitude                Float?   @map("map_latitude")
  mapLongitude               Float?   @map("map_longitude")
  isActive                   Boolean  @default(true)
  bannerImage                String?  @map("banner_image")
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuItems MenuItem[]
  orders    Order[]
  reviews   Review[]

  @@map("restaurant_profiles")
}

model MenuItem {
  id            String         @id @default(cuid())
  name          String
  description   String?
  image         String?
  price         Float
  category      String?
  allergens     Json?
  spicyLevel    Int            @default(0) @map("spicy_level")
  isVegetarian  Boolean        @default(false) @map("is_vegetarian")
  isVegan       Boolean        @default(false) @map("is_vegan")
  isGlutenFree  Boolean        @default(false) @map("is_gluten_free")
  isActive      Boolean        @default(true) @map("is_active")
  restaurantId  String         @map("restaurant_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  restaurant    RestaurantProfile @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  modifications Modification[]

  @@map("menu_items")
}

model Modification {
  id         String   @id @default(cuid())
  name       String
  cost       Float
  menuItemId String   @map("menu_item_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("modifications")
}

model Order {
  id                    String      @id @default(cuid())
  customerProfileId     String      @map("customer_profile_id")
  restaurantId          String      @map("restaurant_id")
  driverProfileId       String?     @map("driver_profile_id")
  total                 Float
  subtotal              Float
  deliveryFee           Float
  serviceFee            Float
  deliveryAddress       String
  specialInstructions   String?
  status                OrderStatus @default(PENDING)
  paymentMethodId       String?     @map("payment_method_id")
  paymentStatus         String      @default("PENDING") @map("payment_status")
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")

  customerProfile       CustomerProfile    @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
  restaurant            RestaurantProfile  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  driverProfile         DriverProfile?     @relation(fields: [driverProfileId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  paymentMethod         PaymentMethod?     @relation(fields: [paymentMethodId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  orderItems            OrderItem[]
  reviews               Review[]

  @@map("orders")
}

model OrderItem {
  id                    String   @id @default(cuid())
  orderId               String   @map("order_id")
  menuItemId            String   @map("menu_item_id")
  quantity              Int
  price                 Float
  specialInstructions   String?  @map("special_instructions")
  selectedModifications Json?   @map("selected_modifications")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  order                 Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem              MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model PaymentMethod {
  id                String   @id @default(cuid())
  customerProfileId String   @map("customer_profile_id")
  type              String
  last4             String
  cardHolder        String   @map("card_holder")
  expiryMonth       String
  expiryYear        String
  isDefault         Boolean  @default(false) @map("is_default")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  customerProfile   CustomerProfile @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
  orders            Order[]

  @@map("payment_methods")
}

model Review {
  id                String   @id @default(cuid())
  orderId           String   @map("order_id")
  customerProfileId String   @map("customer_profile_id")
  driverProfileId   String?  @map("driver_profile_id")
  restaurantId      String?  @map("restaurant_id")
  rating            Int?     @db.SmallInt
  comment           String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  order             Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customerProfile   CustomerProfile    @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
  driverProfile     DriverProfile?     @relation(fields: [driverProfileId], references: [id], onDelete: SetNull)
  restaurant        RestaurantProfile? @relation(fields: [restaurantId], references: [id], onDelete: SetNull)

  @@map("reviews")
}
